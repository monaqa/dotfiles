# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet input_one "macro: input_one" b
macro_rules! input_one {
	($t:ty) => {{
		let mut line: String = String::new();
		std::io::stdin().read_line(&mut line).unwrap();
		line.trim().parse::<$t>().unwrap()
	}};

	($t:ty; $n:expr) => {
		(0..$n).map(|_| input_one!($t)).collect::<Vec<_>>()
	};
}
endsnippet

snippet input_tuple "macro: input_tuple" b
macro_rules! input_tuple {
	($($t:ty),*) => {
		{
			let mut line: String = String::new();
			std::io::stdin().read_line(&mut line).unwrap();
			let mut iter = line.split_whitespace();
			(
				$(iter.next().unwrap().parse::<$t>().unwrap(),)*
			)
		}
	};

	($($t:ty),*; $n:expr) => {
		(0..$n).map(|_|
			input_tuple!($($t),*)
		).collect::<Vec<_>>()
	};
}
endsnippet

snippet input_vec "macro: input_vec" b
macro_rules! input_vec {
	($t:ty) => {
		{
			let mut line: String = String::new();
			std::io::stdin().read_line(&mut line).unwrap();
			line.split_whitespace()
				.map(|t| t.parse::<$t>().unwrap())
				.collect::<Vec<_>>()
		}
	};
	($t:ty; $n:expr) => {
		(0..$n).map(|_| input_vec!($t)).collect::<Vec<_>>()
	};
}
endsnippet

snippet getter "getter of fields" b
pub fn ${1:name}(&self) -> &${2:str} {
	&self.$1
}
endsnippet

snippet getter_mut "mutable getter of fields" b
pub fn ${1:name}_mut(&mut self) -> &mut ${2:str} {
	&mut self.$1
}
endsnippet

snippet setter "setter of fields" b
pub fn set_${1:name}(&mut self, $1: ${2:String}) {
	self.$1 = $1;
}
endsnippet

snippet tpest "Test function of Pest parser" b
#[test]
fn ${1:rule_name}() {
	assert_success(Rule::$1, "$2");
	assert_fail(Rule::$1, "$3");
}
endsnippet

snippet ua "use anyhow" b
use anyhow::*;
endsnippet

snippet usd "use serde" b
use serde::*;
endsnippet

snippet structopts "structopt" b
use structopt::StructOpt;

#[derive(Debug, Clone, StructOpt)]
struct Opts {
	$0
}
endsnippet
