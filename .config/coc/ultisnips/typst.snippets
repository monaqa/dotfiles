# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet tick "Tick command" b
#tick("`date '+%Y-%m-%d'`")
$0
endsnippet

snippet import-easytable "import easytable" b
#import "@preview/easytable:0.1.0": easytable, elem; #import elem: *
endsnippet

snippet et "use easytable" b
#easytable({
	tr[$0]
})
endsnippet

snippet termlog "termlog command" b
#code.termlog[
\`\`\`sh
$0
\`\`\`
][
\`\`\`
\`\`\`
]
endsnippet

snippet cetz "use cetz" b
#import "@preview/cetz:0.2.1"

#cetz.canvas(length: 20pt, {
	import cetz.draw: *

	grid((0, 0), (10, 10), stroke: luma(85%) + 0.25pt, step: 0.25)
	grid((0, 0), (10, 10), stroke: luma(70%) + 0.5pt)

	circle((2, 2), radius: 1)
	rect((1, 1), (3, 2), stroke: red)
	content((2, 2), anchor: "south", padding: 0.1)[test]
	$0
})
endsnippet

snippet fletcher "use fletcher" b
#import "@preview/fletcher:0.5.1" as fletcher: diagram, node, edge

#diagram(
	debug: true,
	spacing: (20pt, 10pt),
	{
		import fletcher.shapes: *

		node(name: <node1>, (0, 0), stroke: teal, shape: circle)[Node1]
		node(name: <node2>, (2, 0), stroke: teal, shape: circle)[Node2]
		edge(<node1>, <node2>, "->")
	}
)
endsnippet

snippet scrap "scrap command" w
#scrap("$0")
endsnippet

snippet today "Today" w
`date '+%Y/%m/%d'`
endsnippet
